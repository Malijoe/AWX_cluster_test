---

- name: get org_id
  block:
    - name: list organizations
      uri:
        url: "{{ awx_url }}/api/v2/organizations/"
        method: GET
        force_basic_auth: yes
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
      register: orgs

    - name: retrieve org id for project.organization
      set_fact:
        org_id: "{{ orgs | json_query(\"json.results[?name=='\" + project.organization + \"'].id\") | first }}"

- name: get credential_id
  block:
    - name: list credentials
      uri:
        url: "{{ awx_url }}/api/v2/credentials"
        method: GET
        force_basic_auth: yes
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
      register: creds

    - name: retrieve cred_id for project.credentials
      set_fact:
        cred_id: "{{ creds | json_query(\"json.results[?name=='\" + project.credential + \"'].id\") | first }}"
  when: project.credential is defined and project.credential != ""

- name: set project name as git repo name
  set_fact:
    project_name: "{{ project.scm_url | regex_search('(foo)') }}"

- debug:
    msg: "{{ project_name }}"

- name: template project_template
  template:
    src: project_template.json.j2
    dest: "{{ temp_dir }}/project_template.json"

- name: create awx project
  uri:
    url: "{{ awx_url }}/api/v2/projects/"
    method: POST
    force_basic_auth: yes
    user: "{{ awx_user }}"
    password: "{{ awx_password }}"
    body_format: json
    body: "{{ lookup('file', '{{ temp_dir }}/project_template.json') }}"
    status_code: 201, 400
  register: info
  when: org_id is defined

- name: get project_id on status code 201
  set_fact:
    project_id: "{{ info.json.id }}"
  when: info.status == 201

- name: get project_id on status code 400
  block:

    - name: get response message
      set_fact:
        response_message: "{{ info.json }}"

    - name: adjust for when project already exists
      block:
        - debug:
            msg: "{{ response_message.__all__ }} Task will continue anyway"

        - name: List projects
          uri:
            url: "{{ awx_url }}/api/v2/projects/"
            method: GET
            force_basic_auth: yes
            user: "{{ awx_user }}"
            password: "{{ awx_password }}"
          register: prjs

        - name: get project_id
          set_fact:
            project_id: "{{ prjs | json_query(\"json.results[?name=='\" + project.name + \"'].id\") | first }}"
      when: response_message.__all__ is defined and response_message.__all__ is search('already exists')

    - fail:
        msg: "{{ response_message }}"
      when: response_message.__all__ is not defined or ((response_message.__all__ is search('already exists')) != True)

  when: info.status == 400

- name: create templates w/o surveys
  block:
    - set_fact:
        with_survey: False

    - name: create templates
      include_tasks: create_template.yml
      loop: "{{ template_config_paths }}"
      loop_control:
        loop_var: path

  when: template_config_paths is defined

- name: create templates w/ surveys
  block:
    - set_fact:
        with_survey: True

    - name: create templates
      include_tasks: create_template.yml
      loop: "{{ templates_with_surveys }}"
      loop_control:
        loop_var: path

  when: templates_with_surveys is defined